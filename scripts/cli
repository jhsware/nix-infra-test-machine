#!/usr/bin/env bash
set -a
SCRIPT_DIR=$(dirname $0)
WORK_DIR=${WORK_DIR:-"$(readlink -f $SCRIPT_DIR/..)"}
NIX_INFRA=${NIX_INFRA:-"nix-infra"}
NIXOS_VERSION=${NIXOS_VERSION:-"24.11"}
SSH_KEY=${SSH_KEY:-"nixinfra-machine"}
SSH_EMAIL=${SSH_EMAIL:-"your-email@example.com"}
SECRETS_PWD=${SECRETS_PWD:-"my_secrets_password"}
LOCATION=${LOCATION:-"hel1"}
MACHINE_TYPE=${MACHINE_TYPE:-"cpx21"}
set +a

checkTool() {
  local tool=$1
  local info=$2
  if ! command -v $tool >/dev/null 2>&1; then
      echo "$2"
      exit 1
  fi
}

checkTool nix-infra \
  "The 'nix-infra' cli is required for this script to work. Visit https://github.com/jhsware/nix-infra for instructions on installation"

checkTool nix-shell \
  "The 'nix-shell' tool is recommended to make sure you get a proper environment. Use the Determinate Systems Nix installer to install it https://zero-to-nix.com/concepts/nix-installer/"

checkTool hcloud \
  "The 'hcloud' cli is required for this script to work. Run 'nix-shell' in this project directory to make sure you get the right version"

checkTool ssh \
  "The 'ssh' tool is required for this script to work. Run 'nix-shell' in this project directory to install it"

if [[ "init create upgrade rollback destroy update ssh cmd action port-forward" == *"$1"* ]]; then
  CMD="$1"
  shift
fi

for i in "$@"; do
  case $i in
    --env=*)
    ENV="${i#*=}"
    shift
    ;;
    --target=*)
    TARGET="${i#*=}"
    shift
    ;;
    --no-teardown)
    TEARDOWN=no
    shift
    ;;
    --port-mapping=*)
    PORT_MAPPING="${i#*=}"
    shift
    ;;
    *)
    REST="$@"
    ;;
  esac
done

# Read then environments file if provided
if [ "$ENV" != "" ]; then
  set -a
  source $ENV
  set +a
fi

# An Hetzner Cloud token is required
if [ -z "$HCLOUD_TOKEN" ]; then
  echo "Missing env-var HCLOUD_TOKEN. Load through .env-file that is specified through --env."
  exit 1
fi

# Helper functions
tearDown() {
  $NIX_INFRA destroy -d $WORK_DIR --batch \
      --target="$TARGET"
}

cleanupOnFail() {
  if [ $1 -ne 0 ]; then
    echo "$2"
    tearDown
    exit 1
  fi
}

# Commands

if [ "$CMD" = "init" ]; then
  $NIX_INFRA init -d $WORK_DIR --no-cert-auth --batch
  exit 0
fi

if [ "$CMD" = "cmd" ]; then
  if [ -z "$TARGET" ] || [ -z "$REST" ]; then
    echo "Usage: $0 cmd --env=$ENV --target=[node] [cmd goes here]"
    exit 1
  fi
  $NIX_INFRA cmd -d $WORK_DIR --target="$TARGET" "$REST"
  exit 0
fi

if [ "$CMD" = "create" ]; then
  _start=`date +%s`

  if [ -z "$REST" ]; then
    echo "Usage: $0 create --env=$ENV [node1 node2 ...]"
    exit 1
  fi

  # We need to add the ssh-key for it to work for some reason
  ssh-add $WORK_DIR/ssh/$SSH_KEY

  # We split the provisioning calls so we can select --placement-groups
  # where it makes sense. Since provisioning takes a while we run
  # them in parallel as background jobs.
  $NIX_INFRA provision -d $WORK_DIR --batch --env="$WORK_DIR/.env" \
      --nixos-version=$NIXOS_VERSION \
      --ssh-key=$SSH_KEY \
      --location="$LOCATION" \
      --machine-type="$MACHINE_TYPE" \
      --node-names="$REST"
  cleanupOnFail $? "ERROR: Provisioning failed! Cleaning up..."

  _provision=`date +%s`

  $NIX_INFRA init-machine -d $WORK_DIR --batch --env="$WORK_DIR/.env" \
      --nixos-version=$NIXOS_VERSION \
      --target="$REST" \
      --node-module="node_types/standalone_machine.nix"

  # TODO: Is this really needed or can init-machine to rebuild?
  $NIX_INFRA cmd -d $WORK_DIR --target="$REST" "nixos-rebuild switch --fast"

  _init_nodes=`date +%s`

  # Now the nodes are up an running, let install apps
  echo "INSTALLING APPS..."

  $NIX_INFRA deploy-apps -d $WORK_DIR --batch --env="$WORK_DIR/.env" \
    --target="$REST" --no-overlay-network
  $NIX_INFRA cmd -d $WORK_DIR --target="$REST" "nixos-rebuild switch --fast"
  
  echo "...INSTALLING APPS"

  _end=`date +%s`

  printTime() {
    local _start=$1; local _end=$2; local _secs=$((_end-_start))
    printf '%02dh:%02dm:%02ds' $(($_secs/3600)) $(($_secs%3600/60)) $(($_secs%60))
  }
  printf '+ provision  %s\n' $(printTime $_start $_provision)
  printf '+ init nodes  %s\n' $(printTime $_provision $_init_nodes)
  printf '+ install apps %s\n' $(printTime $_init_nodes $_end)
  printf '= SUM %s\n' $(printTime $_start $_end)

  echo "***************** DONE *******************"
fi

if [ "$CMD" = "upgrade" ]; then
  if [ -z "$REST" ]; then
    echo "Usage: $0 upgrade --env=$ENV [node1 node2 ...]"
    exit 1
  fi
  # To perform unsupervised upgrades automatically add the following lines
  # to your configuration:
  #
  # system.autoUpgrade.enable  = true;
  # system.autoUpgrade.allowReboot  = true;
  #
  # The second line allows rebooting on kernel updates.

  $NIX_INFRA cmd -d $WORK_DIR --target="$REST" "nixos-rebuild switch --upgrade"
  exit 0
fi

if [ "$CMD" = "rollback" ]; then
  if [ -z "$REST" ]; then
    echo "Usage: $0 upgrade --env=$ENV [node1 node2 ...]"
    exit 1
  fi

  $NIX_INFRA cmd -d $WORK_DIR --target="$REST" "nixos-rebuild switch --rollback"
  exit 0
fi

if [ "$CMD" = "update" ]; then
  if [ -z "$REST" ]; then
    echo "Usage: $0 update --env=$ENV [node1 node2 ...]"
    exit 1
  fi
  (cd "$WORK_DIR" && git fetch origin && git reset --hard origin/$(git branch --show-current))
  $NIX_INFRA update-machine -d $WORK_DIR --batch --env="$WORK_DIR/.env" \
    --nixos-version=$NIXOS_VERSION \
    --target="$REST" \
    --node-module="node_types/standalone_machine.nix" \
    --rebuild
  
  $NIX_INFRA deploy-apps -d $WORK_DIR --batch --env="$WORK_DIR/.env" \
    --target="$REST"
  $NIX_INFRA cmd -d $WORK_DIR --target="$REST" "nixos-rebuild switch --fast"
  exit 0
fi

if [ "$CMD" = "destroy" ]; then
  tearDown
  exit 0
fi

if [ "$CMD" = "port-forward" ]; then
  if [ -z "$TARGET" ] || [ -z "$PORT_MAPPING" ]; then
    echo "Usage: $0 port-forward --env=$ENV --port-mapping=[local:remote]"
    exit 1
  fi

  OLD_IFS=$IFS  # Save current IFS
  IFS=: read LOCAL_PORT REMOTE_PORT <<< "$PORT_MAPPING"
  IFS=$OLD_IFS  # Restore IFS to original value

  $NIX_INFRA port-forward -d $WORK_DIR --env="$WORK_DIR/.env" \
    --target="$TARGET" \
    --local-port="$LOCAL_PORT" \
    --remote-port="$REMOTE_PORT"
  exit 0
fi

if [ "$CMD" = "ssh" ]; then
  if [ -z "$REST" ]; then
    echo "Usage: $0 ssh --env=$ENV [node]"
    exit 1
  fi
  # This is the only way I get ssh to work properly right now
  # the nix-infra ssh command won't handle control codes right now.
  HCLOUD_TOKEN=$HCLOUD_TOKEN hcloud server ssh $REST -i $WORK_DIR/ssh/$SSH_KEY
  exit 0
fi

if [ "$CMD" = "action" ]; then
  # read action opts <<< "$REST"
  # if [ -z $action ]; then
  #   echo "Usage: $0 action [cmd] [opts]"
  #   exit 1
  # fi
  # (cd "$WORK_DIR" && git fetch origin && git reset --hard origin/$(git branch --show-current))
  $NIX_INFRA action -d $WORK_DIR --target="service001" --app-module="elasticsearch" \
    --cmd="$REST" # --env-vars="ELASTIC_PASSWORD="
  exit 0
fi
